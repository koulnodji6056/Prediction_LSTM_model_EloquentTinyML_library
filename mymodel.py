# -*- coding: utf-8 -*-
"""Mymodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Jd9nRLLyuNH5u4tcxuTGzovCgp7IGXW

### ***Importante librairies***
"""

!python --version

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

#print("TF version:", tf.__version__)
print("Numpy" + np.__version__)
#print("Keras" + tf.keras.__version__)
print("Pandas" + pd.__version__)

df =pd.read_csv('/content/drive/MyDrive/My research data /raw_data_sensors_.csv')
df.head()

def df_to_X_y(df, window_size=1):
  df_as_np = df.to_numpy()
  X = []
  y = []
  for i in range(len(df_as_np)-window_size):
    row = [r for r in df_as_np[i:i+window_size]]
    X.append(row)
    label = [df_as_np[i+window_size][0], df_as_np[i+window_size][1]]
    y.append(label)
  return np.array(X), np.array(y)

X, y = df_to_X_y(df)
X.shape, y.shape

X_train, y_train = X[:15215], y[:15215]  
X_val, y_val = X[15215:19562], y[15215:19562]
X_test, y_test = X[19562:], y[19562:]
X_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape, y_test.shape

X_train, y_train = X[:15215], y[:15215]  
X_val, y_val = X[15215:19562], y[15215:19562]
X_test, y_test = X[19562:], y[19562:]
X_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape, y_test.shape

Ti_training_mean = np.mean(X_train[:, :, 0])
Ti_training_std = np.std(X_train[:, :, 0])

Hi_training_mean = np.mean(X_train[:, :, 1])
Hi_training_std = np.std(X_train[:, :, 1])

To_training_mean = np.mean(X_train[:, :, 2])
To_training_std = np.std(X_train[:, :, 2])

Ho_training_mean = np.mean(X_train[:, :, 3])
Ho_training_std = np.std(X_train[:, :, 3])

m1_training_mean = np.mean(X_train[:, :, 4])
m1_training_std = np.std(X_train[:, :, 4])

l_training_mean = np.mean(X_train[:, :, 5])
l_training_std = np.std(X_train[:, :, 5])

carbone_training_mean = np.mean(X_train[:, :, 6])
carbone_training_std = np.std(X_train[:, :, 6])

def preprocess_feature(X):
  X[:, :, 0] = (X[:, :, 0] - Ti_training_mean) / Ti_training_std
  X[:, :, 1] = (X[:, :, 1] - Hi_training_mean) / Hi_training_std
  X[:, :, 2] = (X[:, :, 2] - To_training_mean) / To_training_std
  X[:, :, 3] = (X[:, :, 3] - Ho_training_mean) / Ho_training_std
  X[:, :, 4] = (X[:, :, 4] - m1_training_mean) / m1_training_std
  X[:, :, 5] = (X[:, :, 5] - l_training_mean) / l_training_std
  X[:, :, 6] = (X[:, :, 6] - carbone_training_mean) / carbone_training_std
  return X

def preprocess_output(y):
  y[:, 0] = (y[:, 0] - Ti_training_mean) / Ti_training_std
  y[:, 1] = (y[:, 1] - Hi_training_mean) / Hi_training_std
  return y

preprocess_feature(X_train)
preprocess_feature(X_val)
preprocess_feature(X_test)

preprocess_output(y_train)
preprocess_output(y_val)
preprocess_output(y_test)

"""## One hidden layer **LSTM**"""

import tensorflow as tf

print("TF version:", tf.__version__)
print("Numpy" + np.__version__)
print("Keras" + tf.keras.__version__)
print("Pandas" + pd.__version__)

from tensorflow import keras
from tensorflow.keras.models import load_model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Conv1D
from tensorflow.keras.layers import GRU
from tensorflow.keras.layers import InputLayer
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
#from keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam
import os

model = Sequential()
model.add(InputLayer((1, 7)))
model.add(LSTM(8, return_sequences=True))
model.add(LSTM(4, return_sequences=False))
model.add(Dense(2, 'relu'))
model.add(Dense(2, 'linear'))
model.summary()
model.compile(loss='MeanSquaredError', optimizer=Adam(learning_rate=0.003), metrics=[tf.keras.metrics.RootMeanSquaredError()])
history= model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=50, batch_size = 32)

!pip install h5py

from tensorflow.keras.models import load_model
from tensorflow.keras.models import save_model

model.save('my_model.h5')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS, tf.lite.OpsSet.SELECT_TF_OPS]
converter._experimental_lower_tensor_list_ops = False
tflite_model = converter.convert()

open("/content/tflite_model.tflite","wb").write(tflite_model)

!pip install -U tinymlgen

from tinymlgen import port
c_code = port(tflite_model, pretty_print=True)
print(c_code)

!apt-get -qq install xxd
#!apt-get install -qq xxd #installing the tool

!echo "const unsigned char model[] = {" > /content/model.h
!cat /content/tflite_model.tflite | xxd -i >> /content/model.h 
!echo "};" >> /content/model.h

#files.download("/content/model.h") #automaticly download your file

#!apt-get  clean && sudo !apt-get  update
#!apt-get -qq install xxd
#!xxd -i arduino_sensor_model.tflite > sensor_model.cc
!xxd -i tflite_model.tflite > sensor_model.h
!cat sensor_model.h